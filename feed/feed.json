{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "david-risney/blog",
	"language": "en",
	"home_page_url": "https://david-risney.github.io/blog/",
	"feed_url": "https://david-risney.github.io/feed/feed.json",
	"description": "David Risney&#39;s blog on web or coding things",
	"author": {
		"name": "Dave Risney",
		"url": "https://deletethis.net/dave/"
	},
	"items": [
		{
			"id": "https://david-risney.github.io/post/eleventy-github-pages/",
			"url": "https://david-risney.github.io/post/eleventy-github-pages/",
			"title": "Eleventy on GitHub Pages",
			"content_html": "<p>I wanted to replace my existing blog solution with a simple markdown setup. I decided to give Eleventy a try and host it on GitHub Pages. Here are the steps I've taken so far:</p>\n<ol>\n<li>Create a new GitHub project using <a href=\"https://github.com/11ty/eleventy-base-blog\">Elventy Base Blog</a> as a project template.</li>\n<li>Used the yml from <a href=\"https://www.rockyourcode.com/how-to-deploy-eleventy-to-github-pages-with-github-actions/\">How to deploy eleventy to github pages with github actions</a> in a new file <a href=\"https://github.com/david-risney/blog/blob/main/.github/workflows/build_eleventy.yml\"><code>.github/workflows/build_eleventy.yml</code></a>.</li>\n<li>I updated some version numbers, and added a permissions contents write per the <a href=\"https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-first-deployment-with-github_token\">peaceiris/actions-gh-pages help</a>.</li>\n<li>I also made sure to create the <code>gh-pages</code> branch.</li>\n<li>And in the GitHub project's Settings | Pages, set Source to <code>Deploy from a branch</code> and Branch to <code>gh-pages</code>.</li>\n<li>Then I needed to <a href=\"https://github.com/david-risney/blog/commit/583048de085a4dda89ef23f63b8a454ae889376a\">update the pathPrefix setting</a> to <code>/blog/</code> to match my project name.</li>\n</ol>\n<p>With this I've got Eleventy mostly setup and running on GitHub with GitHub Pages to serve the blog and GitHub Actions to rebuild the site whenever I push. Next up, how do I find a better site layout? And after that, the much harder problem of can I move my existing blog content over to this? Maybe in the interim just merge this blog content into deletethis.net.</p>\n",
			"date_published": "2023-01-27T00:00:00Z"
		}
		,
		{
			"id": "https://david-risney.github.io/post/restricted-capabilities-and-msix-apis/",
			"url": "https://david-risney.github.io/post/restricted-capabilities-and-msix-apis/",
			"title": "Restricted Capabilities and MSIX APIs",
			"content_html": "<p>SysInternals is in the Windows Store? This surprised me since last I knew you couldn't have admin-y utilities as appx packages in the Windows Store.</p>\n<p>Taking a look at their appxmanifest, you can see how they've used restricted capabilities to get admin-like access to what they need. You can view the appxmanifest of any installed package using the <code>Get-AppxPackage</code> PowerShell command and the <code>Get-AppxPackageManifest</code> command:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">> <span class=\"token punctuation\">(</span><span class=\"token function\">Get-AppxPackage</span> <span class=\"token operator\">*</span>SysInternals* <span class=\"token punctuation\">|</span> <span class=\"token function\">Get-AppxPackageManifest</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Package<span class=\"token punctuation\">.</span>Capabilities<span class=\"token punctuation\">.</span>OuterXml</code></pre>\n<p>(After formatting the results for you dear reader)</p>\n<pre class=\"language-xml\" tabindex=\"0\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">rescap:</span>Capability</span> <span class=\"token attr-name\">Name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>runFullTrust<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">rescap:</span>Capability</span> <span class=\"token attr-name\">Name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>allowElevation<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">rescap:</span>Capability</span> <span class=\"token attr-name\">Name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>unvirtualizedResources<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></code></pre>\n<p>These three <a href=\"https://docs.microsoft.com/en-us/windows/uwp/packaging/app-capability-declarations#restricted-capabilities\">capabilities are all documented</a>:</p>\n<ul>\n<li><code>fullTrust</code> is to run desktop apps from an msix package.</li>\n<li><code>allowElevation</code> is to run your desktop app elevated.</li>\n<li><code>unvirtualizedResources</code> is to skip the normal registry and disk virtualization that is usually done to help sandbox packaged apps and desktop apps from messing with one another.</li>\n</ul>\n<p>But do mere mortals such as you or I get to use restricted capabilities and get your own admin utility app into the Store? The docs say <a href=\"https://docs.microsoft.com/en-us/windows/uwp/packaging/app-capability-declarations#restricted-capability-approval-process\">there is an approval process</a> to use restricted capabilities in the Store so... maybe with extra scrutiny?</p>\n<p>However, the <a href=\"https://docs.microsoft.com/en-us/windows/uwp/packaging/app-capability-declarations\">docs for <code>allowElevation</code></a> are less encouraging:</p>\n<blockquote>\n<p>We don't recommend that you declare this capability in applications that you submit to the Microsoft Store. In most cases, the use of this capability won't be approved.</p>\n</blockquote>\n<p>OK well, I appreciate the bluntness anyway. And elsewhere on that page it tries to steer me away</p>\n<blockquote>\n<p>Note that you can sideload apps that declare restricted capabilities without needing to receive any approval. Approval is only required when submitting these apps to the Store.</p>\n</blockquote>\n<p>So is it still useful to package my utility desktop app as MSIX if I'm not going to put it in the Store? Yes!  There's a whole set of APIs that didn't exist last time I looked in this area. You can <a href=\"https://learn.microsoft.com/en-us/windows/msix/non-store-developer-updates\">check for and install updates to your MSIX app</a>. And similar <a href=\"https://learn.microsoft.com/en-us/windows/msix/app-installer/installing-windows10-apps-web\">docs on installing your non-Store MSIX</a> in the first place.</p>\n<p>(Incidentally that doc mentions how <code>ms-appinstaller:</code> has been disabled. I'd love to read more about what happened there but based on just the name of this URI scheme and my previous life working on URIs I'll make an educated guess.)</p>\n<p>I started looking into all this to see if I should move WebView2Utilities over to MSIX and seems like I really should. Although until I get a <a href=\"https://learn.microsoft.com/en-us/windows/msix/app-installer/installing-windows10-apps-web#signing-the-app-package\">proper code signing certificate</a> seems like this isn't going to happen.</p>\n<p>(Unless I just tell folks to do something dangerous like run a .ps1 file off the github repo that gets the msix, extracts and trusts its cert, then installs the msix...)</p>\n",
			"date_published": "2022-09-16T00:00:00Z"
		}
		,
		{
			"id": "https://david-risney.github.io/post/404-good-news-bad-news/",
			"url": "https://david-risney.github.io/post/404-good-news-bad-news/",
			"title": "404 Good News, Bad News",
			"content_html": "<p>So much has to go right to get a 404. Machines all over the world talking to each other over a surprisingly large number of protocols. It's almost a disservice to call it an error.</p>\n<p><code>404 Good News Bad News</code></p>\n<p>When I make a browser, the default 404 page is going to be incredibly detailed:</p>\n<blockquote>\n<p>Sorry we couldn't locate your resource, but a number of things went well to get you this far: DNS, TCP/IP connection, the Bombe helped crack Nazi encryption and win WW2, metallurgy invented before at least 5500BC, ...</p>\n</blockquote>\n",
			"date_published": "2022-09-12T00:00:00Z"
		}
		,
		{
			"id": "https://david-risney.github.io/post/watch-javascript-via-proxy/",
			"url": "https://david-risney.github.io/post/watch-javascript-via-proxy/",
			"title": "Watch JavaScript via Proxy",
			"content_html": "<p>JavaScript has a type <code>Proxy</code> that lets you intercept all interactions with an object - all property reads, writes, method calls, and so on. One fun thing you can do with this is watch how JavaScript itself interacts with your objects.</p>\n<p>If we put a <code>Proxy</code> in another <code>Proxy</code> we can see how JavaScript uses our objects:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <br>        <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">t<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <br>            <span class=\"token function\">logCall</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> property<span class=\"token punctuation\">,</span> Reflect<span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Reflect<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">function</span> <span class=\"token function\">logCall</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">description<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">,</span> fnThis<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>fnArgs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">const</span> r <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>fnThis<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>fnArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>description <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\t'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>fnArgs<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n  -->\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>description <span class=\"token operator\">+</span> <span class=\"token string\">'\\n\\t'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>fnArgs<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n  -fail->\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span> </code></pre>\n<h2 id=\"how-this-works\" tabindex=\"-1\">How this works <a class=\"header-anchor\" href=\"https://david-risney.github.io/post/watch-javascript-via-proxy/\">#</a></h2>\n<p><code>trace</code> returns a <code>Proxy</code> around your object that uses <code>Reflect</code> to perform the normal <code>Proxy</code> operations but then <code>console.log</code> the call.</p>\n<p>The constructor for <code>Proxy</code> takes two parameters: first the object you're wrapping, and second an object with functions for all the different kind of object interactions that you want to intercept. Because we want to just log the interaction and not do anything specific we can use a <code>Proxy</code> around <code>Reflect</code> to define this second parameter.</p>\n<p>Our inner <code>Proxy</code> implements the handler of the outer <code>Proxy</code>. The handler is supposed to have methods called <code>get</code>, <code>set</code>, <code>apply</code> and others for each operation to intercept. Instead we define our inner <code>Proxy</code>s <code>get</code> to return a function that will perform the operation and log it using <code>logCall</code>. The function we pass in to <code>logCall</code> to run is one of the functions off of <code>Reflect</code>. <code>Reflect</code> defines all the <code>Proxy</code> handler functions <code>get</code>, <code>set</code>, <code>apply</code> and so on but where each just performs those operations. <code>Reflect</code> is like a convenient default for all <code>Proxy</code> handler functions. We want to perform the default operations but additionally log the result so using <code>Reflect</code> is exactly what we want.</p>\n<h2 id=\"what-you-can-do-with-it\" tabindex=\"-1\">What you can do with it <a class=\"header-anchor\" href=\"https://david-risney.github.io/post/watch-javascript-via-proxy/\">#</a></h2>\n<p>With that you can call <code>trace</code> with an object and get out a <code>Proxy</code> that acts just like your object but also <code>console.log</code>s every <code>get</code>, <code>set</code>, <code>has</code>, <code>getOwnPropertyDescriptor</code>, and so on that JavaScript asks of your object.</p>\n<p>You can watch how <code>Array.sort</code> sorts an array.</p>\n<p>Or how <code>Array.toString</code> calls <code>Array.join</code>.</p>\n<p>Or how <code>Array.concat</code> checks for <code>Symbol.isConcatSpreadable</code>.</p>\n<p>Check out the corresponding ECMAScript standard and you can see how the logged Proxy calls match the standard defined steps for things like <a href=\"https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.sort\">Array.sort</a>.</p>\n<p>Because I pass objects to <code>console.log</code> DevTools will show you an interactive object in the console. If you try it out the log is easier to understand than as text in the gist:</p>\n<pre class=\"language-log\" tabindex=\"0\"><code class=\"language-log\">array get <br>        <span class=\"token operator\">(</span><span class=\"token number\">3</span><span class=\"token operator\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span> sort Proxy <span class=\"token operator\">{</span><span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token operator\">}</span> <span class=\"token operator\">)</span> <br>    <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> ƒ sort<span class=\"token operator\">(</span><span class=\"token operator\">)</span> <span class=\"token operator\">{</span> <span class=\"token punctuation\">[</span>native code<span class=\"token punctuation\">]</span> <span class=\"token operator\">}</span></code></pre>\n<p>The above is a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/get\"><code>Proxy</code> handler's get call</a>. The first param is the array <code>(3) [300, 200, 100]</code> on which we will 'get'. The second param is the string <code>'sort'</code> that is the property to get. The third is our proxy.</p>\n<p>I haven't tried wrapping the return values in trace Proxy although maybe that would give an even better picture of what's happening.</p>\n<p>Various <code>Array</code> functions can operate on a <code>this</code> that is a not an <code>Array</code>. If you're trying to make a non-<code>Array</code> object work with <code>Array</code> functions, then using a <code>Proxy</code> to watch what JavaScript is doing can help debug.</p>\n<h3 id=\"watch-a-for-loop\" tabindex=\"-1\">Watch a <code>for</code> loop <a class=\"header-anchor\" href=\"https://david-risney.github.io/post/watch-javascript-via-proxy/\">#</a></h3>\n<p>But Proxy watching works for other parts of JavaScript and not just standard functions. For example watch a <code>for</code> loop enumerate over your array:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'array'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> name <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>And the log:</p>\n<pre class=\"language-log\" tabindex=\"0\"><code class=\"language-log\">array ownKeys<br>    <span class=\"token operator\">(</span><span class=\"token number\">3</span><span class=\"token operator\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span> <br>  <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>  <span class=\"token operator\">(</span><span class=\"token number\">4</span><span class=\"token operator\">)</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span><br>array getPrototypeOf<br>    <span class=\"token operator\">(</span><span class=\"token number\">3</span><span class=\"token operator\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span> <br>  <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>  <span class=\"token punctuation\">[</span>constructor<span class=\"token operator\">:</span> ƒ<span class=\"token punctuation\">,</span> at<span class=\"token operator\">:</span> ƒ<span class=\"token punctuation\">,</span> concat<span class=\"token operator\">:</span> ƒ<span class=\"token punctuation\">,</span> copyWithin<span class=\"token operator\">:</span> ƒ<span class=\"token punctuation\">,</span> fill<span class=\"token operator\">:</span> ƒ<span class=\"token punctuation\">,</span> …<span class=\"token punctuation\">]</span><br>array getOwnPropertyDescriptor<br>    <span class=\"token operator\">(</span><span class=\"token number\">3</span><span class=\"token operator\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span> <span class=\"token number\">0</span> <br>  <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>  <span class=\"token operator\">{</span>value<span class=\"token operator\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> writable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> enumerable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> configurable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token operator\">}</span><br>array getOwnPropertyDescriptor<br>    <span class=\"token operator\">(</span><span class=\"token number\">3</span><span class=\"token operator\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span> <span class=\"token number\">1</span> <br>  <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>  <span class=\"token operator\">{</span>value<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> writable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> enumerable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> configurable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token operator\">}</span><br>array getOwnPropertyDescriptor<br>    <span class=\"token operator\">(</span><span class=\"token number\">3</span><span class=\"token operator\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span> <span class=\"token number\">2</span> <br>  <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>  <span class=\"token operator\">{</span>value<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> writable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> enumerable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> configurable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token operator\">}</span><br>array getOwnPropertyDescriptor<br>    <span class=\"token operator\">(</span><span class=\"token number\">3</span><span class=\"token operator\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span> length <br>  <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>  <span class=\"token operator\">{</span>value<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> writable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> enumerable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> configurable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token operator\">}</span></code></pre>\n<p>The <code>for</code> loop asks your object for the names of its properties and then the value of each.</p>\n<h3 id=\"watch-instanceof\" tabindex=\"-1\">Watch <code>instanceof</code> <a class=\"header-anchor\" href=\"https://david-risney.github.io/post/watch-javascript-via-proxy/\">#</a></h3>\n<p>Or <code>instanceof</code> with your proxy on the left hand side</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">arr <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span></code></pre>\n<p>And watch JavaScript get the prototype of array</p>\n<pre class=\"language-log\" tabindex=\"0\"><code class=\"language-log\">array getPrototypeOf<br>    <span class=\"token operator\">(</span><span class=\"token number\">3</span><span class=\"token operator\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span> <br>  <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>  <span class=\"token punctuation\">[</span>constructor<span class=\"token operator\">:</span> ƒ<span class=\"token punctuation\">,</span> at<span class=\"token operator\">:</span> ƒ<span class=\"token punctuation\">,</span> concat<span class=\"token operator\">:</span> ƒ<span class=\"token punctuation\">,</span> copyWithin<span class=\"token operator\">:</span> ƒ<span class=\"token punctuation\">,</span> fill<span class=\"token operator\">:</span> ƒ<span class=\"token punctuation\">,</span> …<span class=\"token punctuation\">]</span></code></pre>\n<p>Or <code>instanceof</code> with your proxy on the right hand side</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">String <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">arr</span></code></pre>\n<p>And watch JavaScript ask your array for its <code>Symbol.hasInstance</code> property.</p>\n<pre class=\"language-log\" tabindex=\"0\"><code class=\"language-log\">array get<br>    <span class=\"token operator\">(</span><span class=\"token number\">3</span><span class=\"token operator\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span> Symbol<span class=\"token operator\">(</span>Symbol<span class=\"token punctuation\">.</span>hasInstance<span class=\"token operator\">)</span> Proxy<span class=\"token operator\">(</span>Array<span class=\"token operator\">)</span> <span class=\"token operator\">{</span><span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token operator\">}</span> <br>  <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>  undefined</code></pre>\n<p>(Here's a <a href=\"https://gist.github.com/david-risney/120af7aadb3d3c946e85f46e3869a8eb\">related gist</a>.)</p>\n",
			"date_published": "2022-02-24T00:00:00Z"
		}
		,
		{
			"id": "https://david-risney.github.io/post/javascript-arrays-are-neat/",
			"url": "https://david-risney.github.io/post/javascript-arrays-are-neat/",
			"title": "JavaScript Arrays are neat",
			"content_html": "<p>JavaScript arrays are unbelievable. If I told you the length property of an array is writable you might chuckle and say 'oh JavaScript'. But no, it goes all the way.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>a<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1,2,3</span></code></pre>\n<p>This seems like a curve where folks very new to programming or very experienced with JavaScript know what this does and folks in the middle say that can't possibly work:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token operator\">--</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></code></pre>\n<p>As you'd expect given what decreasing length does, increasing length works similarly:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>a<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 7</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1,2,3,4,5,,</span></code></pre>\n<p>The length property is not configurable so you can't delete it. There's something I like about telling JavaScript to delete length and its just like, 'nah'.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">delete</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre>\n<p>More fun: The Array functions don't care if they act on an Array. They only require an object with numbered properties and a length property:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string-property property\">'0'</span><span class=\"token operator\">:</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string-property property\">'1'</span><span class=\"token operator\">:</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string-property property\">'length'</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {0: 'a', 1: 'b', length: 2}</span><br><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['b']</span></code></pre>\n<p>Now that I have an object with a configurable <code>length</code> property I can delete the <code>length</code>. After that the Array functions don't like my object anymore. But they don't complain. They still produce something:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">delete</span> o<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span><br><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// []</span><br><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> <span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ''</span></code></pre>\n",
			"date_published": "2021-11-24T00:00:00Z"
		}
		
	]
}
